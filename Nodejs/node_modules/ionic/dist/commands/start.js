"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
const start_1 = require("../lib/start");
const modules_1 = require("../lib/modules");
const starter_templates_1 = require("../lib/starter-templates");
let StartCommand = class StartCommand extends cli_utils_1.Command {
    preInputsPrompt() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.env.argv['list']) {
                this.env.log.msg(start_1.getStarterTemplateTextList(starter_templates_1.STARTER_TEMPLATES).join('\n'));
                return 0;
            }
            if (this.env.project.directory) {
                const response = yield this.env.prompt({
                    type: 'confirm',
                    name: 'continue',
                    message: 'You are already in an Ionic project directory. Do you really want to start another project here?',
                    default: false,
                });
                if (!response['continue']) {
                    return 0;
                }
            }
        });
    }
    preRun(inputs, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!inputs[1]) {
                const response = yield this.env.prompt({
                    type: 'list',
                    name: 'template',
                    message: 'What starter would you like to use:',
                    choices: () => {
                        const starterTemplates = starter_templates_1.STARTER_TEMPLATES.filter(st => st.type === options['type']);
                        return start_1.getStarterTemplateTextList(starterTemplates)
                            .map((text, index) => {
                            return {
                                name: text,
                                short: starterTemplates[index].name,
                                value: starterTemplates[index].name
                            };
                        });
                    }
                });
                inputs[1] = response['template'];
            }
        });
    }
    run(inputs, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let [projectName, starterTemplateName] = inputs;
            let appName = options['app-name'] || projectName;
            let cloudAppId = options['cloud-app-id'] || '';
            let starterBranchName = options['starterBranchName'] || 'master';
            let wrapperBranchName = options['wrapperBranchName'] || 'master';
            let projectRoot;
            if (!start_1.isProjectNameValid(projectName)) {
                throw `Please name your Ionic project something meaningful other than ${chalk.red(projectName)}`;
            }
            let starterType = starter_templates_1.STARTER_TYPES.find(type => type['id'] === options['type']);
            if (!starterType) {
                throw `Unable to find starter type for ${options['type']}`;
            }
            if (!options['skip-deps']) {
                for (let dep of starterType.globalDependencies) {
                    const cmdInstalled = yield cli_utils_1.getCommandInfo(dep);
                    if (typeof cmdInstalled === 'undefined') {
                        if (dep === 'cordova') {
                            throw this.exit(`Cordova CLI not found on your PATH. Please install Cordova globally (you may need ${chalk.green('sudo')}):\n\n` +
                                `${chalk.green('npm install -g cordova')}\n\n` +
                                `If that doesn't work, see the installation docs: https://cordova.apache.org/docs/en/latest/guide/cli/#installing-the-cordova-cli`);
                        }
                        else {
                            throw this.exit(`Sorry, ${chalk.green(dep)} is a global dependency, but it was not found on your PATH.`);
                        }
                    }
                }
            }
            projectRoot = path.resolve(projectName);
            projectName = path.basename(projectRoot);
            const pathExists = modules_1.load('path-exists');
            if (!pathExists.sync(projectName)) {
                this.env.tasks.next(`Creating directory ${chalk.green(projectRoot)}`);
                fs.mkdirSync(projectRoot);
            }
            else if (!start_1.isSafeToCreateProjectIn(projectRoot)) {
                const response = yield this.env.prompt({
                    type: 'confirm',
                    name: 'overwrite',
                    message: `The directory ${chalk.green(projectName)} contains file(s) that could conflict. ` +
                        'Would you like to overwrite the directory with this new project?'
                });
                if (response['overwrite']) {
                    try {
                        this.env.tasks.next(`Creating directory ${chalk.green(projectRoot)}`);
                        yield cli_utils_1.rimrafp(projectRoot);
                        fs.mkdirSync(projectRoot);
                    }
                    catch (e) {
                        throw e;
                    }
                }
                else {
                    throw `\nPlease provide a projectName that does not conflict with this directory.\n`;
                }
            }
            let starterTemplateMatches = starter_templates_1.STARTER_TEMPLATES.filter(t => t.type === options['type'] && t.name === starterTemplateName);
            let starterTemplate = starterTemplateMatches[0];
            if (starterTemplateMatches.length > 1) {
                starterTemplate = starterTemplateMatches.find(t => t.type === options['type']);
            }
            if (!starterTemplate) {
                throw `Unable to find starter template for ${starterTemplateName}`;
            }
            const wrapperBranchPath = starterType.baseArchive.replace('<BRANCH_NAME>', wrapperBranchName);
            const starterBranchPath = starterTemplate.archive.replace('<BRANCH_NAME>', starterBranchName);
            const extractDir = options['type'] === 'ionic1' ? path.join(projectRoot, 'www') : projectRoot;
            this.env.tasks.next(`Downloading app base (${chalk.dim(wrapperBranchPath)})`);
            yield start_1.tarXvfFromUrl(wrapperBranchPath, projectRoot);
            this.env.tasks.next(`Downloading starter template ${chalk.bold(starterTemplateName.toString())} (${chalk.dim(starterBranchPath)})`);
            yield start_1.tarXvfFromUrl(starterBranchPath, extractDir);
            if (options['type'] === 'ionic1') {
                const resourcesPath = 'https://github.com/driftyco/ionic-default-resources/archive/master.tar.gz';
                this.env.tasks.next(`Downloading resources (${chalk.dim(resourcesPath)})`);
                yield start_1.tarXvfFromUrl(resourcesPath, path.join(projectRoot, 'resources'));
            }
            this.env.tasks.next(`Updating ${chalk.bold('package.json')} with app details`);
            yield start_1.patchPackageJsonForCli(appName, starterType, projectRoot);
            yield start_1.updatePackageJsonForCli(appName, starterType, projectRoot);
            this.env.tasks.next(`Creating configuration file ${chalk.bold('ionic.config.json')}`);
            yield start_1.createProjectConfig(appName, starterType, projectRoot, cloudAppId);
            this.env.tasks.end();
            const config = yield this.env.config.load();
            if (options['yarn']) {
                this.env.log.debug('Opting into yarn!');
                config.cliFlags.yarn = true;
            }
            if (!options['skip-deps']) {
                this.env.log.info('Installing dependencies may take several minutes!');
                const options = { cwd: projectRoot };
                yield cli_utils_1.pkgInstall(this.env, undefined, options);
                for (let dep of starterType.localDependencies) {
                    yield cli_utils_1.pkgInstallPlugin(this.env, dep, options);
                }
            }
            this.env.log.msg(start_1.getHelloText());
            if (!options['skip-link']) {
                const { linkApp } = yield this.env.prompt({
                    type: 'confirm',
                    name: 'linkApp',
                    message: 'Link this app to your Ionic Dashboard to use tools like Ionic View?'
                });
                if (linkApp && (yield this.env.session.isLoggedIn())) {
                    const opn = modules_1.load('opn');
                    const token = yield this.env.session.getUserToken();
                    opn(`${config.urls.dash}/?user_token=${token}`, { wait: false });
                    this.env.log.ok(`Run ${chalk.green(`ionic link`)} to link to the app.`);
                }
                else if (linkApp) {
                    this.env.log.msg(`\nYou will need to login in order to link this app. Please run the following commands to do so.\n` +
                        `  ${chalk.green(`ionic login`)} - login first\n` +
                        `  ${chalk.green(`ionic link`)} - then link your app`);
                }
            }
            this.env.log.msg(`\nGo to your newly created project: ${chalk.green(`cd ${cli_utils_1.prettyPath(projectRoot)}`)}\n`);
        });
    }
};
StartCommand = __decorate([
    cli_utils_1.CommandMetadata({
        name: 'start',
        type: 'global',
        description: 'Create a new project',
        exampleCommands: [
            '',
            'mynewapp blank',
            'mynewapp tabs --type ionic-angular',
            'mynewapp blank --type ionic1'
        ],
        inputs: [
            {
                name: 'name',
                description: 'The name of your project directory',
                validators: [cli_utils_1.validators.required],
                prompt: {
                    message: 'What would you like to name your project:',
                },
            },
            {
                name: 'template',
                description: `The starter template to use (e.g. ${['blank', 'tabs'].map(t => chalk.green(t)).join(', ')}; use ${chalk.green('--list')} to see all)`,
            }
        ],
        options: [
            {
                name: 'type',
                description: `Type of project to start (e.g. ${starter_templates_1.STARTER_TYPES.map(st => chalk.green(st.id)).join(', ')})`,
                type: String,
                default: 'ionic-angular',
            },
            {
                name: 'app-name',
                description: 'Human-readable name (use quotes around the name)',
                type: String,
                aliases: ['n'],
            },
            {
                name: 'list',
                description: 'List starter templates available',
                type: Boolean,
                aliases: ['l']
            },
            {
                name: 'skip-deps',
                description: 'Skip npm/yarn package installation of dependencies',
                type: Boolean,
            },
            {
                name: 'yarn',
                description: 'Opt-in to using yarn (instead of npm)',
                type: Boolean,
            },
            {
                name: 'skip-link',
                description: 'Do not link app to an Ionic Account',
                type: Boolean,
            }
        ]
    })
], StartCommand);
exports.StartCommand = StartCommand;
