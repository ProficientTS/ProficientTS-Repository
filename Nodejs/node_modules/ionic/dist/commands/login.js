"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
const cli_utils_2 = require("@ionic/cli-utils");
let LoginCommand = class LoginCommand extends cli_utils_1.Command {
    preInputsPrompt() {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.env.session.isLoggedIn()) {
                const response = yield this.env.prompt({
                    type: 'confirm',
                    name: 'login_again',
                    message: 'You are already logged in! Do you want to log in to another account?',
                });
                if (!response['login_again']) {
                    return 0;
                }
            }
            else {
                this.env.log.msg(`Log into your Ionic account\n` +
                    `If you don't have one yet, create yours by running: ${chalk.green(`ionic signup`)}\n`);
            }
        });
    }
    run(inputs, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let [email, password] = inputs;
            yield this.env.session.login(email, password);
            this.env.log.ok('You are logged in!');
        });
    }
};
LoginCommand = __decorate([
    cli_utils_1.CommandMetadata({
        name: 'login',
        type: 'global',
        description: 'Login with your Ionic ID',
        exampleCommands: ['', 'john@example.com', 'hello@example.com secret'],
        inputs: [
            {
                name: 'email',
                description: 'Your email address',
                prompt: {
                    message: 'Email:'
                },
                validators: [cli_utils_2.validators.required, cli_utils_2.validators.email],
                private: true
            },
            {
                name: 'password',
                description: 'Your password',
                prompt: {
                    type: 'password',
                    message: 'Password:'
                },
                validators: [cli_utils_2.validators.required],
                private: true
            }
        ]
    })
], LoginCommand);
exports.LoginCommand = LoginCommand;
