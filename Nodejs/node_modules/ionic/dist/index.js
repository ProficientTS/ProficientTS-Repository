"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const minimist = require("minimist");
const chalk = require("chalk");
const cli_utils_1 = require("@ionic/cli-utils");
const commands_1 = require("./commands");
exports.name = 'ionic';
exports.version = '3.0.0-rc.2';
exports.namespace = new commands_1.IonicNamespace();
function registerHooks(hooks) {
    hooks.register(exports.name, 'command:info', () => __awaiter(this, void 0, void 0, function* () {
        const osName = cli_utils_1.load('os-name');
        const os = osName();
        const node = process.version;
        const [xcode, iosDeploy, iosSim,] = yield Promise.all([
            cli_utils_1.getCommandInfo('/usr/bin/xcodebuild', ['-version']),
            cli_utils_1.getCommandInfo('ios-deploy', ['--version']),
            cli_utils_1.getCommandInfo('ios-sim', ['--version']),
        ]);
        return [
            { type: 'global-packages', name: 'Ionic CLI', version: exports.version },
            { type: 'system', name: 'Node', version: node },
            { type: 'system', name: 'OS', version: os },
            { type: 'system', name: 'Xcode', version: xcode || 'not installed' },
            { type: 'system', name: 'ios-deploy', version: iosDeploy || 'not installed' },
            { type: 'system', name: 'ios-sim', version: iosSim || 'not installed' },
        ];
    }));
}
exports.registerHooks = registerHooks;
function run(pargv, env) {
    return __awaiter(this, void 0, void 0, function* () {
        const now = new Date();
        let exitCode = 0;
        let err;
        pargv = modifyArguments(pargv.slice(2));
        const argv = minimist(pargv);
        const inquirer = cli_utils_1.load('inquirer');
        const bottomBar = new inquirer.ui.BottomBar();
        const bottomBarHack = bottomBar;
        try {
            bottomBarHack.rl.output.mute();
        }
        catch (e) { }
        const log = new cli_utils_1.Logger({ stream: bottomBar.log });
        const tasks = new cli_utils_1.TaskChain(bottomBar);
        if (argv['log-level']) {
            log.level = argv['log-level'];
        }
        let foundCommand = mapLegacyCommand(argv._[0]);
        if (foundCommand) {
            log.msg(`The ${chalk.green(argv._[0])} command has been renamed. To find out more, run:\n\n` +
                `  ${chalk.green(`ionic ${foundCommand} --help`)}\n\n`);
        }
        else {
            env['PROJECT_FILE'] = cli_utils_1.PROJECT_FILE;
            env['PROJECT_DIR'] = yield getProjectRootDir(process.cwd(), env['PROJECT_FILE']);
            try {
                const config = new cli_utils_1.Config(env['IONIC_DIRECTORY'] || cli_utils_1.CONFIG_DIRECTORY, cli_utils_1.CONFIG_FILE);
                const project = new cli_utils_1.Project(env['PROJECT_DIR'], env['PROJECT_FILE']);
                const configData = yield config.load();
                const hooks = new cli_utils_1.HookEngine();
                const client = new cli_utils_1.Client(configData.urls.api);
                const telemetry = new cli_utils_1.Telemetry(config, exports.version);
                const shell = new cli_utils_1.Shell(tasks, log);
                const session = new cli_utils_1.Session(config, project, client);
                const app = new cli_utils_1.App(session, project, client);
                const argv = minimist(pargv);
                argv._ = argv._.map(i => String(i));
                registerHooks(hooks);
                cli_utils_1.registerHooks(hooks);
                const ionicEnvironment = {
                    app,
                    argv,
                    client,
                    config,
                    hooks,
                    log,
                    namespace: exports.namespace,
                    pargv,
                    plugins: {
                        ionic: {
                            name: exports.name,
                            version: exports.version,
                            namespace: exports.namespace,
                            registerHooks,
                        },
                    },
                    prompt: inquirer.createPromptModule(),
                    project,
                    session,
                    shell,
                    tasks,
                    telemetry,
                };
                let updates;
                try {
                    yield cli_utils_1.loadPlugins(ionicEnvironment);
                }
                catch (e) {
                    log.error(chalk.red.bold('Error occurred while loading plugins. CLI functionality may be limited.\nChecking for CLI updates now...'));
                    log.debug(chalk.red(chalk.bold('Plugin error: ') + (e.stack ? e.stack : e)));
                    updates = yield cli_utils_1.checkForUpdates(ionicEnvironment);
                    if (updates.length === 0) {
                        log.error('No updates found after plugin error--please report this issue.');
                    }
                }
                if (typeof updates === 'undefined' && now.getTime() - new Date(configData.lastCommand).getTime() >= 3600000) {
                    yield cli_utils_1.checkForUpdates(ionicEnvironment);
                }
                yield exports.namespace.runCommand(ionicEnvironment);
                configData.lastCommand = now.toISOString();
                yield Promise.all([config.save(), project.save()]);
            }
            catch (e) {
                log.debug(chalk.red.bold('!!! ERROR ENCOUNTERED !!!'));
                err = e;
            }
            if (err) {
                tasks.fail();
                exitCode = 1;
                if (cli_utils_1.isSuperAgentError(err)) {
                    log.msg(cli_utils_1.formatSuperAgentError(err));
                }
                else if (err.fatal) {
                    exitCode = err.exitCode || 1;
                    if (err.message) {
                        log.error(err.message);
                    }
                }
                else {
                    log.msg(chalk.red(String(err)));
                    if (err.stack) {
                        log.debug(chalk.red(err.stack));
                    }
                }
                process.exit(exitCode);
            }
        }
        tasks.cleanup();
        bottomBar.close();
    });
}
exports.run = run;
function getProjectRootDir(dir, projectFileName) {
    return __awaiter(this, void 0, void 0, function* () {
        const dirInfo = path.parse(dir);
        const directoriesToCheck = dirInfo.dir
            .slice(dirInfo.root.length)
            .split(path.sep)
            .concat(dirInfo.base)
            .map((segment, index, array) => {
            let pathSegments = array.slice(0, (array.length - index));
            return dirInfo.root + path.join(...pathSegments);
        });
        for (let i = 0; i < directoriesToCheck.length; i++) {
            const results = yield cli_utils_1.fsReadDir(directoriesToCheck[i]);
            if (results.includes(projectFileName)) {
                return directoriesToCheck[i];
            }
        }
        return '';
    });
}
function modifyArguments(pargv) {
    let modifiedArgArray = pargv.slice();
    const minimistArgv = minimist(pargv);
    if (pargv.length === 0) {
        return ['help'];
    }
    if (minimistArgv['stats-opt-out']) {
        return ['telemetry', 'no'];
    }
    if (minimistArgv['stats-opt-in']) {
        return ['telemetry', 'yes'];
    }
    if (minimistArgv['help'] || minimistArgv['h']) {
        if (minimistArgv._.length > 0) {
            return ['help', ...minimistArgv._];
        }
        else {
            return ['help'];
        }
    }
    if (minimistArgv._.length === 0 && (minimistArgv['version'] || minimistArgv['v'])) {
        return ['version'];
    }
    if (minimistArgv._[0] === 'lab') {
        modifiedArgArray[0] = 'serve';
        modifiedArgArray.push('--lab');
    }
    if (minimistArgv['verbose']) {
        modifiedArgArray[modifiedArgArray.indexOf('--verbose')] = '--log-level=debug';
    }
    return modifiedArgArray;
}
function mapLegacyCommand(command) {
    const commandMap = {
        'build': 'cordova build',
        'compile': 'cordova compile',
        'emulate': 'cordova emulate',
        'platform': 'cordova platform',
        'plugin': 'cordova plugin',
        'prepare': 'cordova prepare',
        'resources': 'cordova resources',
        'run': 'cordova run',
        'cordova:build': 'cordova build',
        'cordova:compile': 'cordova compile',
        'cordova:emulate': 'cordova emulate',
        'cordova:platform': 'cordova platform',
        'cordova:plugin': 'cordova plugin',
        'cordova:prepare': 'cordova prepare',
        'cordova:resources': 'cordova resources',
        'cordova:run': 'cordova run',
    };
    return commandMap[command];
}
